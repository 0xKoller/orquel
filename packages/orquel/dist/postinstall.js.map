{"version":3,"sources":["../src/wizard.ts","../src/postinstall.ts"],"sourcesContent":["import inquirer from 'inquirer';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\ninterface WizardChoices {\n  embeddings: string[];\n  vectorStore: string[];\n  answerer: string[];\n}\n\nconst ADAPTER_PACKAGES = {\n  embeddings: {\n    'OpenAI Embeddings': '@orquel/embeddings-openai',\n  },\n  vectorStore: {\n    'Memory Store (for development)': '@orquel/store-memory',\n    'pgvector (PostgreSQL)': '@orquel/store-pgvector',\n    'Qdrant': '@orquel/store-qdrant',\n  },\n  answerer: {\n    'OpenAI (GPT-4)': '@orquel/answer-openai',\n  },\n};\n\nexport async function runSetupWizard(): Promise<void> {\n  console.log('üîß Orquel Setup Wizard\\n');\n  \n  const answers = await inquirer.prompt([\n    {\n      type: 'checkbox',\n      name: 'embeddings',\n      message: 'Select embeddings adapter(s):',\n      choices: Object.keys(ADAPTER_PACKAGES.embeddings),\n      default: ['OpenAI Embeddings'],\n      validate: (input) => input.length > 0 || 'Please select at least one embeddings adapter',\n    },\n    {\n      type: 'checkbox',\n      name: 'vectorStore',\n      message: 'Select vector store adapter(s):',\n      choices: Object.keys(ADAPTER_PACKAGES.vectorStore),\n      default: ['Memory Store (for development)'],\n      validate: (input) => input.length > 0 || 'Please select at least one vector store adapter',\n    },\n    {\n      type: 'checkbox',\n      name: 'answerer',\n      message: 'Select answer adapter(s):',\n      choices: Object.keys(ADAPTER_PACKAGES.answerer),\n      default: ['OpenAI (GPT-4)'],\n    },\n  ]) as WizardChoices;\n\n  // Collect packages to install\n  const packagesToInstall: string[] = [];\n  \n  answers.embeddings.forEach(choice => {\n    const pkg = ADAPTER_PACKAGES.embeddings[choice as keyof typeof ADAPTER_PACKAGES.embeddings];\n    if (pkg) packagesToInstall.push(pkg);\n  });\n  \n  answers.vectorStore.forEach(choice => {\n    const pkg = ADAPTER_PACKAGES.vectorStore[choice as keyof typeof ADAPTER_PACKAGES.vectorStore];\n    if (pkg) packagesToInstall.push(pkg);\n  });\n  \n  answers.answerer.forEach(choice => {\n    const pkg = ADAPTER_PACKAGES.answerer[choice as keyof typeof ADAPTER_PACKAGES.answerer];\n    if (pkg) packagesToInstall.push(pkg);\n  });\n\n  if (packagesToInstall.length === 0) {\n    console.log('No adapters selected. You can install them manually later.');\n    return;\n  }\n\n  console.log(`\\nüì¶ Installing packages: ${packagesToInstall.join(', ')}\\n`);\n\n  try {\n    // Detect package manager\n    const packageManager = await detectPackageManager();\n    const installCommand = getInstallCommand(packageManager, packagesToInstall);\n    \n    console.log(`Running: ${installCommand}`);\n    const { stdout, stderr } = await execAsync(installCommand);\n    \n    if (stderr && !stderr.includes('warn')) {\n      console.error('Installation warnings:', stderr);\n    }\n    \n    console.log('‚úÖ Packages installed successfully!\\n');\n    \n    // Generate usage example\n    generateUsageExample(answers);\n    \n  } catch (error) {\n    console.error('‚ùå Installation failed:', error);\n    console.log('\\nYou can install the packages manually:');\n    packagesToInstall.forEach(pkg => console.log(`  npm install ${pkg}`));\n  }\n}\n\nasync function detectPackageManager(): Promise<'npm' | 'pnpm' | 'yarn'> {\n  try {\n    await execAsync('pnpm --version');\n    return 'pnpm';\n  } catch {\n    try {\n      await execAsync('yarn --version');\n      return 'yarn';\n    } catch {\n      return 'npm';\n    }\n  }\n}\n\nfunction getInstallCommand(packageManager: string, packages: string[]): string {\n  const packagesStr = packages.join(' ');\n  switch (packageManager) {\n    case 'pnpm':\n      return `pnpm add ${packagesStr}`;\n    case 'yarn':\n      return `yarn add ${packagesStr}`;\n    default:\n      return `npm install ${packagesStr}`;\n  }\n}\n\nfunction generateUsageExample(choices: WizardChoices): void {\n  console.log('üìù Here\\'s a minimal usage example:\\n');\n  \n  const imports: string[] = [\n    'import { createOrquel } from \"@orquel/core\";'\n  ];\n  \n  const adapters: string[] = [];\n  \n  if (choices.embeddings.includes('OpenAI Embeddings')) {\n    imports.push('import { openAIEmbeddings } from \"@orquel/embeddings-openai\";');\n    adapters.push('  embeddings: openAIEmbeddings(),');\n  }\n  \n  if (choices.vectorStore.includes('Memory Store (for development)')) {\n    imports.push('import { memoryStore } from \"@orquel/store-memory\";');\n    adapters.push('  vector: memoryStore(),');\n  }\n  \n  if (choices.answerer.includes('OpenAI (GPT-4)')) {\n    imports.push('import { openAIAnswerer } from \"@orquel/answer-openai\";');\n    adapters.push('  answerer: openAIAnswerer(),');\n  }\n\n  const example = `${imports.join('\\n')}\n\nconst orq = createOrquel({\n${adapters.join('\\n')}\n});\n\nasync function main() {\n  const { chunks } = await orq.ingest({ \n    source: { title: \"My Document\" }, \n    content: \"# Hello Orquel\\\\nThis is a sample document.\" \n  });\n  \n  await orq.index(chunks);\n  \n  const { answer } = await orq.answer(\"What is this document about?\");\n  console.log(answer);\n}\n\nmain().catch(console.error);`;\n\n  console.log(example);\n  console.log('\\nüí° Don\\'t forget to set your environment variables (e.g., OPENAI_API_KEY)');\n  console.log('üìö Check the documentation for more examples and configuration options.');\n}","import { runSetupWizard } from './wizard.js';\n\nasync function postinstall() {\n  // Skip in CI or non-interactive environments\n  if (\n    process.env.CI ||\n    process.env.ORQUEL_NO_POSTINSTALL ||\n    !process.stdout.isTTY\n  ) {\n    console.log('‚ú® Orquel installed! Run \"npx orquel setup\" to configure adapters.');\n    return;\n  }\n\n  try {\n    console.log('üéØ Welcome to Orquel!');\n    console.log('Let\\'s set up your RAG toolkit...\\n');\n    \n    await runSetupWizard();\n  } catch (error) {\n    console.error('Setup wizard failed:', error);\n    console.log('\\nYou can run \"npx orquel setup\" later to configure adapters.');\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  postinstall().catch(console.error);\n}"],"mappings":"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","names":[]}