{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface ProjectConfig {\n  name: string;\n  template: 'minimal-node' | 'nextjs-api';\n  adapters: {\n    embeddings: string;\n    vectorStore: string;\n    answerer: string;\n  };\n  install: boolean;\n}\n\nconst program = new Command();\n\nprogram\n  .name('create-orquel-app')\n  .description('Create a new Orquel application')\n  .version('0.1.0')\n  .argument('[project-name]', 'Name of the project')\n  .option('--template <template>', 'Template to use (minimal-node, nextjs-api)')\n  .option('--no-install', 'Skip package installation')\n  .action(async (projectName?: string, options?: { template?: string; install?: boolean }) => {\n    try {\n      const config = await gatherConfig(projectName, options);\n      await createProject(config);\n    } catch (error) {\n      console.error('‚ùå Failed to create project:', error);\n      process.exit(1);\n    }\n  });\n\nasync function gatherConfig(\n  projectName?: string,\n  options?: { template?: string; install?: boolean }\n): Promise<ProjectConfig> {\n  const answers = await inquirer.prompt([\n    {\n      type: 'input',\n      name: 'name',\n      message: 'Project name:',\n      default: projectName || 'my-orquel-app',\n      validate: (input) => input.trim().length > 0 || 'Project name is required',\n    },\n    {\n      type: 'list',\n      name: 'template',\n      message: 'Select template:',\n      choices: [\n        { name: 'Minimal Node.js', value: 'minimal-node' },\n        { name: 'Next.js API Routes', value: 'nextjs-api' },\n      ],\n      default: options?.template || 'minimal-node',\n    },\n    {\n      type: 'list',\n      name: 'embeddings',\n      message: 'Embeddings adapter:',\n      choices: [\n        { name: 'OpenAI Embeddings', value: '@orquel/embeddings-openai' },\n      ],\n      default: '@orquel/embeddings-openai',\n    },\n    {\n      type: 'list',\n      name: 'vectorStore',\n      message: 'Vector store adapter:',\n      choices: [\n        { name: 'Memory Store (development)', value: '@orquel/store-memory' },\n        { name: 'pgvector (PostgreSQL)', value: '@orquel/store-pgvector' },\n        { name: 'Qdrant', value: '@orquel/store-qdrant' },\n      ],\n      default: '@orquel/store-memory',\n    },\n    {\n      type: 'list',\n      name: 'answerer',\n      message: 'Answer adapter:',\n      choices: [\n        { name: 'OpenAI (GPT-4)', value: '@orquel/answer-openai' },\n      ],\n      default: '@orquel/answer-openai',\n    },\n  ]);\n\n  return {\n    name: answers.name,\n    template: answers.template,\n    adapters: {\n      embeddings: answers.embeddings,\n      vectorStore: answers.vectorStore,\n      answerer: answers.answerer,\n    },\n    install: options?.install !== false,\n  };\n}\n\nasync function createProject(config: ProjectConfig): Promise<void> {\n  const projectPath = path.resolve(config.name);\n  \n  console.log(`\\nüöÄ Creating Orquel app: ${config.name}`);\n  console.log(`üìÇ Location: ${projectPath}`);\n  console.log(`üìã Template: ${config.template}\\n`);\n\n  // Create project directory\n  await fs.mkdir(projectPath, { recursive: true });\n\n  // Copy template files\n  const templatePath = path.join(__dirname, 'templates', config.template);\n  await copyTemplate(templatePath, projectPath, config);\n\n  console.log('‚úÖ Project created successfully!\\n');\n  console.log('Next steps:');\n  console.log(`  cd ${config.name}`);\n  \n  if (config.install) {\n    console.log('  # Dependencies are being installed...');\n  } else {\n    console.log('  npm install');\n  }\n  \n  console.log('  # Set up your environment variables');\n  console.log('  cp .env.example .env');\n  console.log('  # Edit .env with your API keys');\n  console.log('  npm run dev');\n}\n\nasync function copyTemplate(templatePath: string, projectPath: string, config: ProjectConfig): Promise<void> {\n  try {\n    const files = await fs.readdir(templatePath, { recursive: true });\n    \n    for (const file of files) {\n      const srcPath = path.join(templatePath, file as string);\n      const destPath = path.join(projectPath, file as string);\n      \n      const stats = await fs.stat(srcPath);\n      \n      if (stats.isDirectory()) {\n        await fs.mkdir(destPath, { recursive: true });\n      } else {\n        // Read file and process template variables\n        let content = await fs.readFile(srcPath, 'utf-8');\n        content = processTemplate(content, config);\n        \n        await fs.mkdir(path.dirname(destPath), { recursive: true });\n        await fs.writeFile(destPath, content);\n      }\n    }\n  } catch (error) {\n    // Fallback to inline templates if template directory doesn't exist\n    await createInlineTemplate(projectPath, config);\n  }\n}\n\nfunction processTemplate(content: string, config: ProjectConfig): string {\n  return content\n    .replace(/{{PROJECT_NAME}}/g, config.name)\n    .replace(/{{EMBEDDINGS_ADAPTER}}/g, config.adapters.embeddings)\n    .replace(/{{VECTOR_STORE_ADAPTER}}/g, config.adapters.vectorStore)\n    .replace(/{{ANSWERER_ADAPTER}}/g, config.adapters.answerer);\n}\n\nasync function createInlineTemplate(projectPath: string, config: ProjectConfig): Promise<void> {\n  // Create minimal Node.js template inline\n  const packageJson = {\n    name: config.name,\n    version: '1.0.0',\n    type: 'module',\n    scripts: {\n      dev: 'node src/index.js',\n      build: 'tsc',\n      start: 'node dist/index.js',\n    },\n    dependencies: {\n      '@orquel/core': '^0.1.0',\n      [config.adapters.embeddings]: '^0.1.0',\n      [config.adapters.vectorStore]: '^0.1.0',\n      [config.adapters.answerer]: '^0.1.0',\n    },\n    devDependencies: {\n      typescript: '^5.6.3',\n      '@types/node': '^20.17.6',\n    },\n  };\n\n  const indexTs = `import { createOrquel } from '@orquel/core';\nimport { openAIEmbeddings } from '${config.adapters.embeddings}';\nimport { memoryStore } from '${config.adapters.vectorStore}';\nimport { openAIAnswerer } from '${config.adapters.answerer}';\n\nconst orq = createOrquel({\n  embeddings: openAIEmbeddings(),\n  vector: memoryStore(),\n  answerer: openAIAnswerer(),\n});\n\nasync function main() {\n  console.log('üéØ Welcome to your Orquel app!');\n  \n  // Ingest sample content\n  const { chunks } = await orq.ingest({\n    source: { title: 'Sample Document' },\n    content: \\`# Welcome to Orquel\n\nOrquel is a TypeScript-first, open-source toolkit for building knowledge bases and retrieval-augmented generation (RAG) systems.\n\n## Features\n\n- Adapter-driven architecture\n- Composable design\n- TypeScript-first\n- Production-ready\\`\n  });\n\n  console.log(\\`üìÑ Created \\${chunks.length} chunks\\`);\n\n  // Index the chunks\n  await orq.index(chunks);\n  console.log('üìö Indexed chunks successfully');\n\n  // Ask a question\n  const { answer, contexts } = await orq.answer('What is Orquel?');\n  \n  console.log('\\\\n‚ùì Question: What is Orquel?');\n  console.log(\\`üí° Answer: \\${answer}\\`);\n  console.log(\\`üìñ Used \\${contexts.length} context chunks\\`);\n}\n\nmain().catch(console.error);`;\n\n  const envExample = `# OpenAI API Key (required for embeddings and answering)\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Optional: Customize OpenAI model\n# OPENAI_MODEL=gpt-4\n# OPENAI_EMBEDDING_MODEL=text-embedding-3-small`;\n\n  const tsConfig = {\n    compilerOptions: {\n      target: 'ES2022',\n      module: 'ESNext',\n      moduleResolution: 'bundler',\n      esModuleInterop: true,\n      allowSyntheticDefaultImports: true,\n      strict: true,\n      skipLibCheck: true,\n      outDir: './dist',\n      rootDir: './src',\n    },\n    include: ['src/**/*'],\n    exclude: ['node_modules', 'dist'],\n  };\n\n  const readme = `# ${config.name}\n\nA Orquel RAG application.\n\n## Getting Started\n\n1. Install dependencies:\n   \\`\\`\\`bash\n   npm install\n   \\`\\`\\`\n\n2. Set up environment variables:\n   \\`\\`\\`bash\n   cp .env.example .env\n   # Edit .env with your API keys\n   \\`\\`\\`\n\n3. Run the application:\n   \\`\\`\\`bash\n   npm run dev\n   \\`\\`\\`\n\n## Learn More\n\n- [Orquel Documentation](https://github.com/0xkoller/orquel)\n- [OpenAI API Keys](https://platform.openai.com/api-keys)`;\n\n  // Write files\n  await fs.mkdir(path.join(projectPath, 'src'), { recursive: true });\n  await fs.writeFile(path.join(projectPath, 'package.json'), JSON.stringify(packageJson, null, 2));\n  await fs.writeFile(path.join(projectPath, 'src/index.ts'), indexTs);\n  await fs.writeFile(path.join(projectPath, '.env.example'), envExample);\n  await fs.writeFile(path.join(projectPath, 'tsconfig.json'), JSON.stringify(tsConfig, null, 2));\n  await fs.writeFile(path.join(projectPath, 'README.md'), readme);\n}\n\nprogram.parse();"],"mappings":"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","names":[]}