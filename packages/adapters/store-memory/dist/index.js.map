{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { VectorStoreAdapter, Chunk } from '@orquel/core';\n\ninterface StoredChunk extends Chunk {\n  embedding: number[];\n}\n\nexport function memoryStore(): VectorStoreAdapter {\n  const chunks: StoredChunk[] = [];\n\n  return {\n    name: 'memory-store',\n    \n    async upsert(rows: Array<Chunk & { embedding: number[] }>) {\n      for (const row of rows) {\n        // Remove existing chunk with same ID\n        const existingIndex = chunks.findIndex(c => c.id === row.id);\n        if (existingIndex >= 0) {\n          chunks.splice(existingIndex, 1);\n        }\n        \n        // Add new chunk\n        chunks.push({\n          ...row,\n          embedding: [...row.embedding], // Copy to avoid mutations\n        });\n      }\n    },\n\n    async searchByVector(query: number[], k: number) {\n      if (chunks.length === 0) {\n        return [];\n      }\n\n      // Calculate cosine similarity for all chunks\n      const similarities = chunks.map(chunk => ({\n        chunk: {\n          id: chunk.id,\n          text: chunk.text,\n          metadata: chunk.metadata,\n        },\n        score: cosineSimilarity(query, chunk.embedding),\n      }));\n\n      // Sort by similarity (descending) and take top k\n      return similarities\n        .sort((a, b) => b.score - a.score)\n        .slice(0, k);\n    },\n  };\n}\n\nfunction cosineSimilarity(a: number[], b: number[]): number {\n  if (a.length !== b.length) {\n    throw new Error('Vectors must have the same length');\n  }\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    dotProduct += a[i]! * b[i]!;\n    normA += a[i]! * a[i]!;\n    normB += b[i]! * b[i]!;\n  }\n\n  normA = Math.sqrt(normA);\n  normB = Math.sqrt(normB);\n\n  if (normA === 0 || normB === 0) {\n    return 0;\n  }\n\n  return dotProduct / (normA * normB);\n}"],"mappings":";AAMO,SAAS,cAAkC;AAChD,QAAM,SAAwB,CAAC;AAE/B,SAAO;AAAA,IACL,MAAM;AAAA,IAEN,MAAM,OAAO,MAA8C;AACzD,iBAAW,OAAO,MAAM;AAEtB,cAAM,gBAAgB,OAAO,UAAU,OAAK,EAAE,OAAO,IAAI,EAAE;AAC3D,YAAI,iBAAiB,GAAG;AACtB,iBAAO,OAAO,eAAe,CAAC;AAAA,QAChC;AAGA,eAAO,KAAK;AAAA,UACV,GAAG;AAAA,UACH,WAAW,CAAC,GAAG,IAAI,SAAS;AAAA;AAAA,QAC9B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IAEA,MAAM,eAAe,OAAiB,GAAW;AAC/C,UAAI,OAAO,WAAW,GAAG;AACvB,eAAO,CAAC;AAAA,MACV;AAGA,YAAM,eAAe,OAAO,IAAI,YAAU;AAAA,QACxC,OAAO;AAAA,UACL,IAAI,MAAM;AAAA,UACV,MAAM,MAAM;AAAA,UACZ,UAAU,MAAM;AAAA,QAClB;AAAA,QACA,OAAO,iBAAiB,OAAO,MAAM,SAAS;AAAA,MAChD,EAAE;AAGF,aAAO,aACJ,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,EAChC,MAAM,GAAG,CAAC;AAAA,IACf;AAAA,EACF;AACF;AAEA,SAAS,iBAAiB,GAAa,GAAqB;AAC1D,MAAI,EAAE,WAAW,EAAE,QAAQ;AACzB,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACrD;AAEA,MAAI,aAAa;AACjB,MAAI,QAAQ;AACZ,MAAI,QAAQ;AAEZ,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,kBAAc,EAAE,CAAC,IAAK,EAAE,CAAC;AACzB,aAAS,EAAE,CAAC,IAAK,EAAE,CAAC;AACpB,aAAS,EAAE,CAAC,IAAK,EAAE,CAAC;AAAA,EACtB;AAEA,UAAQ,KAAK,KAAK,KAAK;AACvB,UAAQ,KAAK,KAAK,KAAK;AAEvB,MAAI,UAAU,KAAK,UAAU,GAAG;AAC9B,WAAO;AAAA,EACT;AAEA,SAAO,cAAc,QAAQ;AAC/B;","names":[]}