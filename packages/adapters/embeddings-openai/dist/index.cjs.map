{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { EmbeddingsAdapter } from '@orquel/core';\nimport OpenAI from 'openai';\n\nexport interface OpenAIEmbeddingsOptions {\n  apiKey?: string;\n  model?: 'text-embedding-3-small' | 'text-embedding-3-large' | 'text-embedding-ada-002';\n  batchSize?: number;\n  maxRetries?: number;\n}\n\nconst MODEL_DIMENSIONS = {\n  'text-embedding-3-small': 1536,\n  'text-embedding-3-large': 3072,\n  'text-embedding-ada-002': 1536,\n} as const;\n\nexport function openAIEmbeddings(options: OpenAIEmbeddingsOptions = {}): EmbeddingsAdapter {\n  const {\n    apiKey = process.env.OPENAI_API_KEY,\n    model = 'text-embedding-3-small',\n    batchSize = 100,\n    maxRetries = 3,\n  } = options;\n\n  if (!apiKey) {\n    throw new Error(\n      'OpenAI API key is required. Set OPENAI_API_KEY environment variable or pass apiKey option.'\n    );\n  }\n\n  const openai = new OpenAI({\n    apiKey,\n    maxRetries,\n  });\n\n  const dim = MODEL_DIMENSIONS[model];\n\n  return {\n    name: `openai-${model}`,\n    dim,\n\n    async embed(texts: string[]): Promise<number[][]> {\n      if (texts.length === 0) {\n        return [];\n      }\n\n      const results: number[][] = [];\n      \n      // Process in batches to avoid rate limits\n      for (let i = 0; i < texts.length; i += batchSize) {\n        const batch = texts.slice(i, i + batchSize);\n        \n        try {\n          const response = await openai.embeddings.create({\n            model,\n            input: batch,\n            encoding_format: 'float',\n          });\n\n          const embeddings = response.data\n            .sort((a, b) => a.index - b.index)\n            .map(item => item.embedding);\n\n          results.push(...embeddings);\n        } catch (error) {\n          throw new Error(\n            `Failed to generate embeddings: ${error instanceof Error ? error.message : 'Unknown error'}`\n          );\n        }\n      }\n\n      return results;\n    },\n  };\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAmB;AASnB,IAAM,mBAAmB;AAAA,EACvB,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,0BAA0B;AAC5B;AAEO,SAAS,iBAAiB,UAAmC,CAAC,GAAsB;AACzF,QAAM;AAAA,IACJ,SAAS,QAAQ,IAAI;AAAA,IACrB,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,aAAa;AAAA,EACf,IAAI;AAEJ,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,QAAM,SAAS,IAAI,cAAAA,QAAO;AAAA,IACxB;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,MAAM,iBAAiB,KAAK;AAElC,SAAO;AAAA,IACL,MAAM,UAAU,KAAK;AAAA,IACrB;AAAA,IAEA,MAAM,MAAM,OAAsC;AAChD,UAAI,MAAM,WAAW,GAAG;AACtB,eAAO,CAAC;AAAA,MACV;AAEA,YAAM,UAAsB,CAAC;AAG7B,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,WAAW;AAChD,cAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,SAAS;AAE1C,YAAI;AACF,gBAAM,WAAW,MAAM,OAAO,WAAW,OAAO;AAAA,YAC9C;AAAA,YACA,OAAO;AAAA,YACP,iBAAiB;AAAA,UACnB,CAAC;AAED,gBAAM,aAAa,SAAS,KACzB,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,EAChC,IAAI,UAAQ,KAAK,SAAS;AAE7B,kBAAQ,KAAK,GAAG,UAAU;AAAA,QAC5B,SAAS,OAAO;AACd,gBAAM,IAAI;AAAA,YACR,kCAAkC,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AAAA,UAC5F;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":["OpenAI"]}